"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class part_t(object):
    __slots__ = ["timestamp", "pm_10", "pm_2_5", "enabled"]

    def __init__(self):
        self.timestamp = 0
        self.pm_10 = 0
        self.pm_2_5 = 0
        self.enabled = False

    def encode(self):
        buf = BytesIO()
        buf.write(part_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiib", self.timestamp, self.pm_10, self.pm_2_5, self.enabled))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != part_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return part_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = part_t()
        self.timestamp, self.pm_10, self.pm_2_5 = struct.unpack(">qii", buf.read(16))
        self.enabled = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if part_t in parents: return 0
        tmphash = (0x2bf36e01ca54d7e1) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if part_t._packed_fingerprint is None:
            part_t._packed_fingerprint = struct.pack(">Q", part_t._get_hash_recursive([]))
        return part_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

